#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <cstdlib> // For srand and rand
#include <limits>

using namespace std;

void startScreen();
void dealCards(int numPlayers, int numCards);
void game();

int main()
{
    int numPlayers = 3; // Number of players
    int numCards = 7;   // Number of cards per player
    int start, play;
    startScreen();
    while (true) {
        cout << endl<<  "Please Enter 1 to Start, Enter 2 to see the rules: ";
        cin >> start;

        //Only allows the user to input 1 or 2
        if (cin.fail()) {
            cin.clear(); // Clear the error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number (1 or 2)." << endl;
        } else if (start == 1 || start == 2) {
            break; // Valid input
        } else {
            cout << "Invalid choice. Please enter 1 or 2." << endl;
        }
    }
    //Displays the rules if the user inputs 2
    if (start == 2) {
        cout << "\nRules:\n";
        cout << "Gurka begins dealing 7 cards to each player.\n";
        cout << "In this program there are 3 total players.\n";
        cout << "When you get your cards, you may choose one to place down.\n";
        cout << "The computer must then place a card that has a higher or equal value,\nif they do not have a card that is higher or equal value,\nthey must play their lowest card. ";
        cout << "Whoever placed the highest card\nin the round gets to play their card first in the proceeding round.\n";
        cout << "The game continues until everyone has 1 card left. Whoever has the\nlowest value card in the end wins. (note: Aces are worth 14)\n\n";

    }
    else if (start == 1) {
        dealCards(numPlayers, numCards);
    }
    while (true) {
         cout << endl << "Enter 1 if you would like to continue, if not enter 2: ";
         cin >> play;

        //Only allows the user to input 1 or 2
        if (cin.fail()) {
            cin.clear(); // Clear the error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number (1 or 2)." << endl;
        } else if (play == 1 || play == 2) {
            break; // Valid input
        } else {
            cout << "Invalid choice. Please enter 1 or 2." << endl;
        }
    }
    //Ends program if user presses 2
    if (play == 2) {
        return 0;
    }
    //Starts game if user enters 1
    else if (play == 1){
        system("cls");
            dealCards(numPlayers, numCards);
    }
    return 0;
}



// This program displays a start screen with the word "GURKA" in a stylized format
void startScreen(){
    cout << "__________________________________________________" << endl;
    cout << "|                                                |" << endl;
    cout << "|  GGGGG   U     U  RRRRRR   K    K       A      |" << endl;
    cout << "| G     G  U     U  R     R  K   K       A A     |" << endl;
    cout << "| G        U     U  RRRRRR   KKKK       A   A    |" << endl;
    cout << "| G  GGGG  U     U  R    R   K  K      AAAAAAA   |" << endl;
    cout << "| G     G  U     U  R     R  K   K    A       A  |" << endl;
    cout << "|  GGGGG    UUUUU   R     R  K    K  A         A |" << endl;
    cout << "|________________________________________________|" << endl;
}

void dealCards(int numPlayers, int numCards) {
    vector<string> deck;
    string suits[4] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    string values[13] = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"};

    // Create a deck of cards
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 13; j++) {
            deck.push_back(values[j] + " of " + suits[i]);
        }
    }

    // Check if there are enough cards
    if (numPlayers * numCards > deck.size()) {
        cout << "Not enough cards in the deck to deal!" << endl;
        return;
    }

    // Shuffle the deck using std::srand and std::rand
    srand(time(0));
    random_shuffle(deck.begin(), deck.end());

    // Deal cards to players
    for (int player = 0; player < numPlayers; player++) { // Corrected typo here
        cout << "Player " << player + 1 << "'s cards:" << endl;
        for (int card = 0; card < numCards; card++) {
            if (!deck.empty()) {
                cout << deck.back() << endl;
                deck.pop_back();
            }
        }
        cout << endl;
    }
}

void game() {
}

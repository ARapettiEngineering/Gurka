#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>
#include <cmath>
#include <cstdlib> // For srand and rand
#include <limits>

using namespace std;
int p1score = 30;
int p2score = 30;
int p3score = 30;
int winner = 0;
void startScreen();
void game(int numPlayers, int numCards, int displayPlayer);

int main() {

    int numPlayers = 3; // Number of players
    int numCards = 6;   // Number of cards per player
    int displayPlayer = 1; //Chooses which player to display the cards of
    int start, play;
    startScreen();
    while (true) {
        cout << endl<<  "Please Enter 1 to Start, Enter 2 to see the rules: ";
        cin >> start;

        //Only allows the user to input 1 or 2
        if (cin.fail()) {
            cin.clear(); // Clear the error flag
            cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
            cout << "Invalid input. Please enter a number (1 or 2)." << endl;
        }
        else if (start == 1 || start == 2) {
            break; // Valid input
        }
        else {
            cout << "Invalid choice. Please enter 1 or 2." << endl;
        }
    }
    //Displays the rules if the user inputs 2
    if (start == 2) {
            system("cls");
        cout << "\nRules:\n";
        cout << "Gurka begins dealing 6 cards to each player.\n";
        cout << "In this program there are 3 total players.\n";
        cout << "When you get your cards, you may choose one to place down.\n";
        cout << "The computer must then place a card that has a higher or equal value,\nif they do not have a card that is higher or equal value,\nthey must play their lowest card. ";
        cout << "Whoever placed the highest card\nin the round gets to play their card first in the proceeding round.\n";
        cout << "The game continues until everyone has 1 card left. Whoever has the\nlowest value card in the end wins. (note: Aces are worth 14)\n\n";

    }
    else if (start == 1) {
        game (numPlayers,numCards,displayPlayer);
    }
    while (winner == 0){

        cout << "Starting New Game\n";
        system("pause");
        system("cls");
        game (numPlayers,numCards,displayPlayer);
    }
    return 0;
}

// This displays a start screen with the word GURKA
void startScreen() {
    cout << "__________________________________________________" << endl;
    cout << "|                                                |" << endl;
    cout << "|  GGGGG   U     U  RRRRRR   K    K       A      |" << endl;
    cout << "| G     G  U     U  R     R  K   K       A A     |" << endl;
    cout << "| G        U     U  RRRRRR   KKKK       A   A    |" << endl;
    cout << "| G  GGGG  U     U  R    R   K  K      AAAAAAA   |" << endl;
    cout << "| G     G  U     U  R     R  K   K    A       A  |" << endl;
    cout << "|  GGGGG    UUUUU   R     R  K    K  A         A |" << endl;
    cout << "|________________________________________________|" << endl;
}

void game(int numPlayers, int numCards, int displayPlayer) {
    int stringToInt(const string& str);
    int com1value;
    int com2value;
    int p1cardvalue = 1;
    int highestCardPlayer = 1;
    int lowestCardPlayer = 1;
    vector<vector<string> > playerHands(numPlayers); // Store each player's hand
    vector<string> deck;
    string suits[4] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    string values[13] = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "11 or J", "12 or Q", "13 or K", "14 or A"};

    // Create a deck of cards
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 13; j++) {
            deck.push_back(values[j] + " of " + suits[i]);
        }
    }
    // Check if there are enough cards
    if (numPlayers * numCards > deck.size()) {
        cout << "Not enough cards in the deck to deal!" << endl;
        return;
    }

    // Shuffle the deck
    srand(time(0));
    for (size_t i = 0; i < deck.size(); i++) {
        size_t j = i + rand() % (deck.size() - i);
        swap(deck[i], deck[j]);
    }

    // Deal cards to all players
    for (int player = 0; player < numPlayers; player++) {
        cout << "Player " << player + 1 << "'s cards:" << endl;
        for (int card = 0; card < numCards; card++) {
            if (!deck.empty()) {
                cout << deck.back() << endl;
                playerHands[player].push_back(deck.back());
                deck.pop_back();
            }
        }
    }

    // Game loop for the displayed player
    while (!playerHands[displayPlayer - 1].empty()) {
        if (playerHands[displayPlayer - 1].empty()) {
            break;
        }
        // Only allow player 1 to play if their score is >= 1
        if (highestCardPlayer == 1 && p1score >= 1) {
             // Display the displayed player's hand
            cout <<endl << "Player " << displayPlayer << "'s cards:" << endl;
            for (size_t i = 0; i < playerHands[displayPlayer - 1].size(); i++) {
                cout << i + 1 << ": " << playerHands[displayPlayer - 1][i] << endl;
            }

            // Ask the player to choose a card to play
            int choice;
            // Validate the choice
            while (true) {

                cout <<endl<< "Choose a card to play (1-" << playerHands[displayPlayer - 1].size() << "): ";
                cin >> choice;

        //Only allows the input numbers
                if (cin.fail()) {
                    cin.clear(); // Clear the error flag
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
                    cout << "Invalid input. Please enter a number between 1 and 7." << endl;
                }
                else if (choice >= 1 && choice <= 7) {
                    break; // Valid input
                }
                else {
                    cout << "Invalid choice. Please enter a number between 1 and 7." << endl;
                }
            }

            // Play the chosen card
            cout <<endl<< "You played: " << playerHands[displayPlayer - 1][choice - 1] << endl;

            // Extract the chosen card from the player's hand
            string chosenCard = playerHands[displayPlayer - 1][choice - 1];

            // Extract the value of the card (everything before the first space)
            string cardValue = chosenCard.substr(0, chosenCard.find(" "));

            // Update the global p1cardvalue
            p1cardvalue = stringToInt(cardValue);

            // Remove the card from the player's hand
            playerHands[displayPlayer - 1].erase(playerHands[displayPlayer - 1].begin() + (choice - 1));

            // NPC1 play their cards
            if (p2score >= 1) {
                for (int npc = 1; npc < 2; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;

                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc1CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc1CardValue = stringToInt(npc1CardValueStr);
                        if (npc1CardValue >= p1cardvalue) {
                            // Play the lowest card that is >= player 1's card
                            if (selectedCardIndex == -1 || npc1CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc1CardValue;
                                com1value = npc1CardValue;
                            }
                        }

                    }

                    //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                    if (selectedCardIndex == -1) {
                        for (size_t i = 0; i < playerHands[npc].size(); i++) {
                            string npc1CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                            int npc1CardValue = stringToInt(npc1CardValueStr);

                            if (selectedCardIndex == -1 || npc1CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc1CardValue;
                                com1value=npc1CardValue;
                            }
                        }
                    }

                    // Play the selected card
                    cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                    playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                }
                if (com1value>=p1cardvalue){
                    highestCardPlayer = 2;
                }
                if (com1value<p1cardvalue){
                    lowestCardPlayer = 2;
                }
            }
            else if (p2score <= 0){
                // NPC2 play their cards
            if (p3score >= 1 ) {
                for (int npc = 2; npc < 3; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;

                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc2CardValue = stringToInt(npc2CardValueStr);
                        if (npc2CardValue >= p1cardvalue) {
                            // Play the lowest card that is >= player 1's card
                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }

                    }

                    //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                    if (selectedCardIndex == -1) {
                        for (size_t i = 0; i < playerHands[npc].size(); i++) {
                            string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                            int npc2CardValue = stringToInt(npc2CardValueStr);

                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }
                    }

                    // Play the selected card
                    cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                    playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                }
            }
            }

            // NPC2 play their cards
            if (p3score >= 1 && p2score >=1) {
                if (p2score <= p1score){
                    for (int npc = 2; npc < 3; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;

                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc2CardValue = stringToInt(npc2CardValueStr);
                        if (npc2CardValue >= p1cardvalue) {
                            // Play the lowest card that is >= player 1's card
                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }

                    }

                    //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                    if (selectedCardIndex == -1) {
                        for (size_t i = 0; i < playerHands[npc].size(); i++) {
                            string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                            int npc2CardValue = stringToInt(npc2CardValueStr);

                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }
                    }

                    // Play the selected card
                    cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                    playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                }
            }
                }else {
                for (int npc = 2; npc < 3; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;

                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc2CardValue = stringToInt(npc2CardValueStr);
                        if (npc2CardValue >= com1value) {
                            // Play the lowest card that is >= player 1's card
                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }

                    }

                    //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                    if (selectedCardIndex == -1) {
                        for (size_t i = 0; i < playerHands[npc].size(); i++) {
                            string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                            int npc2CardValue = stringToInt(npc2CardValueStr);

                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }
                    }

                    // Play the selected card
                    cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                    playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                }
            }

                if (com2value >= com1value && com2value >= p1cardvalue){
                    highestCardPlayer = 3;
                }
                else if (p1cardvalue > com1value && p1cardvalue > com2value) {
                    highestCardPlayer = 1;
                }

                //If player 3 has the lowest card
                if (com2value < p1cardvalue && com2value < com1value){
                    lowestCardPlayer = 3;
                }
                //If player 1 has the lowest card
                else if (p1cardvalue < com1value && p1cardvalue < com2value){
                    lowestCardPlayer = 1;
                }
                //If player 1 and 2 tie with the lowest card
                else if (p1cardvalue == com1value && p1cardvalue < com2value){
                    lowestCardPlayer = 4;
                }
                //If player 1 and 3 tie with the lowest card
                else if (p1cardvalue == com2value && p1cardvalue < com1value){
                    lowestCardPlayer = 5;
                }
                //If player 2 and 3 tie with the lowest card
                else if (com1value == com2value && com1value < p1cardvalue){
                    lowestCardPlayer = 6;
                }
                //If all 3 players tie with the lowest card
                else if (com1value == com2value && com1value == p1cardvalue){
                    lowestCardPlayer = 7;
                }
                if (playerHands[displayPlayer - 1].size()!= 0) {
                    if (playerHands[displayPlayer - 1].empty()) {
                        break;
                    }
                //Displays which player won the round
                cout << endl << "\n--------------------------\n";
                cout << "| Player " << highestCardPlayer << " won the round |";
                cout << endl << "--------------------------\n";
                }
                system("pause");
            }

        // Player 2 starts if they have the highest card and score >= 1
        if (highestCardPlayer == 2 && playerHands[0].size() != 1 && p2score >= 1) {
              // NPC1 play their cards
            if (p2score >= 1) {
                for (int npc = 1; npc < 2; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;
                    if (playerHands[npc].empty()) continue;
                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc1CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc1CardValue = stringToInt(npc1CardValueStr);

                        // Play the lowest card that is >= player 1's card
                     if (selectedCardIndex == -1 || npc1CardValue > selectedCardValue) {
                         selectedCardIndex = i;
                         selectedCardValue = npc1CardValue;
                         com1value = npc1CardValue;
                     }

                }


                // Play the selected card
                cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
            }
            // NPC2 play their cards
            if (p3score >= 1) {
                for (int npc = 2; npc < 3; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;
                    if (playerHands[npc].empty()) continue;
                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc2CardValue = stringToInt(npc2CardValueStr);
                        if (npc2CardValue >= com1value) {
                            // Play the lowest card that is >= player 1's card
                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }

                    }

                    //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                    if (selectedCardIndex == -1) {
                        for (size_t i = 0; i < playerHands[npc].size(); i++) {
                            string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                            int npc2CardValue = stringToInt(npc2CardValueStr);

                            if (selectedCardIndex == -1 || npc2CardValue < selectedCardValue) {
                                selectedCardIndex = i;
                                selectedCardValue = npc2CardValue;
                                com2value = npc2CardValue;
                            }
                        }
                    }

                    // Play the selected card
                    cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                    playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                }
                if (com2value >= com1value){
                    highestCardPlayer = 3;
                }
                if (com2value <= com1value){
                    lowestCardPlayer = 3;
                }
            }
            }
             // Only allow player 1 to play if their score is >= 1
            if (p1score >= 1) {
                // Display the displayed player's hand
                cout <<endl << "Player " << displayPlayer << "'s cards:" << endl;
                for (size_t i = 0; i < playerHands[displayPlayer - 1].size(); i++) {
                    cout << i + 1 << ": " << playerHands[displayPlayer - 1][i] << endl;
                }

                // Ask the player to choose a card to play
                int choice;
                while (true) {

                    cout <<endl<< "Choose a card to play (1-" << playerHands[displayPlayer - 1].size() << "): ";
                    cin >> choice;

        //Only allows the input numbers
                    if (cin.fail()) {
                        cin.clear(); // Clear the error flag
                        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
                        cout << "Invalid input. Please choose a card." << endl;
                    }
                    else if (choice >= 1 && choice <= playerHands[displayPlayer - 1].size()) {
                        break; // Valid input
                    }
                    else {
                cout << "Invalid choice. Please choose a card." << endl;
                    }
                }
                // Play the chosen card
                cout <<endl<< "You played: " << playerHands[displayPlayer - 1][choice - 1] << endl;

                // Extract the chosen card from the player's hand
                string chosenCard = playerHands[displayPlayer - 1][choice - 1];

                // Extract the value of the card (everything before the first space)
                string cardValue = chosenCard.substr(0, chosenCard.find(" "));

                // Update the global p1cardvalue
                p1cardvalue = stringToInt(cardValue);

                // Remove the card from the player's hand
                playerHands[displayPlayer - 1].erase(playerHands[displayPlayer - 1].begin() + (choice - 1));
                if (p1cardvalue >= com2value && p1cardvalue >= com1value){
                    highestCardPlayer = 1;
                }
            }
            else if (com1value > com2value && com1value > p1cardvalue){
                highestCardPlayer = 2;
            }
            //If player 2 has the lowest card
            if (com1value < p1cardvalue && com1value < com1value){
                    lowestCardPlayer = 2;
            }
                //If player 1 has the lowest card
            else if (p1cardvalue < com1value && p1cardvalue < com2value){
                lowestCardPlayer = 1;
            }
                //If player 1 and 2 tie with the lowest card
            else if (p1cardvalue == com1value && p1cardvalue < com2value){
                  lowestCardPlayer = 4;
            }
                //If player 1 and 3 tie with the lowest card
            else if (p1cardvalue == com2value && p1cardvalue < com1value){
                lowestCardPlayer = 5;
            }
                //If player 2 and 3 tie with the lowest card
            else if (com1value == com2value && com1value < p1cardvalue){
                lowestCardPlayer = 6;
            }
                //If all 3 players tie with the lowest card
            else if (com1value == com2value && com1value == p1cardvalue){
                lowestCardPlayer = 7;
            }
            if (playerHands[displayPlayer - 1].empty()) {
                    break;
                }
            if (playerHands[displayPlayer - 1].size()!= 0) {
            //Display who won the game
            cout << endl << "\n--------------------------\n";
            cout << "| Player " << highestCardPlayer << " won the round |";
            cout << endl << "--------------------------\n";
            }
            system("pause");
        }
        // Player 3 starts if they have the highest card and score >= 1
        if (highestCardPlayer == 3 && playerHands[0].size() != 1 && p3score >= 1) {
            // NPC2 (Player 3) plays only if score >= 1
                for (int npc = 2; npc < 3; npc++) {
                    int selectedCardIndex = -1;
                    int selectedCardValue = -1;
                    if (playerHands[npc].empty()) continue;
                    // Find the highest or lowest card based on player 1's card
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc2CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc2CardValue = stringToInt(npc2CardValueStr);

                         // Play the lowest card that is >= player 1's card
                         if (selectedCardIndex == -1 || npc2CardValue > selectedCardValue) {
                            selectedCardIndex = i;
                            selectedCardValue = npc2CardValue;
                            com2value = npc2CardValue;
                         }

                }


           // Play the selected card
                cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
            }
          // Display the displayed player's hand
            cout <<endl << "Player " << displayPlayer << "'s cards:" << endl;
            for (size_t i = 0; i < playerHands[displayPlayer - 1].size(); i++) {
                cout << i + 1 << ": " << playerHands[displayPlayer - 1][i] << endl;
            }

            // Ask the player to choose a card to play
            int choice;
            while (true) {

                cout <<endl<< "Choose a card to play (1-" << playerHands[displayPlayer - 1].size() << "): ";
                cin >> choice;

        //Only allows the input numbers
                if (cin.fail()) {
                    cin.clear(); // Clear the error flag
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Discard invalid input
                    cout << "Invalid input. Please choose a card" << endl;
                }
                else if (choice >= 1 && choice <= playerHands[displayPlayer - 1].size()) {
                    break; // Valid input
                }
                else {
                    cout << "Invalid choice. Please choose a card" << endl;
                }
            }
            // Play the chosen card
            cout <<endl<< "You played: " << playerHands[displayPlayer - 1][choice - 1] << endl;

            // Extract the chosen card from the player's hand
            string chosenCard = playerHands[displayPlayer - 1][choice - 1];

            // Extract the value of the card (everything before the first space)
            string cardValue = chosenCard.substr(0, chosenCard.find(" "));

            // Update the global p1cardvalue
            p1cardvalue = stringToInt(cardValue);

            // Remove the card from the player's hand
            playerHands[displayPlayer - 1].erase(playerHands[displayPlayer - 1].begin() + (choice - 1));
            if (p1cardvalue >= com2value) {
                highestCardPlayer = 1;
            }
            if (p1cardvalue < com2value) {
                lowestCardPlayer = 1;
            }
         // NPC1 play their cards
            if (p2score >=1) {
            for (int npc = 1; npc < 2; npc++) {
                int selectedCardIndex = -1;
                int selectedCardValue = -1;

                // Find the highest or lowest card based on player 1's card
                for (size_t i = 0; i < playerHands[npc].size(); i++) {
                    string npc1CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                    int npc1CardValue = stringToInt(npc1CardValueStr);
                    if (npc1CardValue >= p1cardvalue) {
                        // Play the lowest card that is >= player 1's card
                        if (selectedCardIndex == -1 || npc1CardValue < selectedCardValue) {
                            selectedCardIndex = i;
                            selectedCardValue = npc1CardValue;
                            com1value = npc1CardValue;
                        }
                    }
                }

                //If the computer does not have a card higher or equal to the player 1 card it will play its lowest card
                if (selectedCardIndex == -1) {
                    for (size_t i = 0; i < playerHands[npc].size(); i++) {
                        string npc1CardValueStr = playerHands[npc][i].substr(0, playerHands[npc][i].find(" "));
                        int npc1CardValue = stringToInt(npc1CardValueStr);

                        if (selectedCardIndex == -1 || npc1CardValue < selectedCardValue) {
                            selectedCardIndex = i;
                            selectedCardValue = npc1CardValue;
                            com1value=npc1CardValue;
                        }
                    }
                }

                // Play the selected card
                cout <<endl << "Player " << npc + 1 << " played: " << playerHands[npc][selectedCardIndex] << endl;
                playerHands[npc].erase(playerHands[npc].begin() + selectedCardIndex);
                if (com1value >= com2value && com1value >= p1cardvalue){
                  highestCardPlayer = 2;
                }
                if (com2value > p1cardvalue && com2value > com1value) {
                    highestCardPlayer = 3;
                }
                     //If player 3 has the lowest card
                if (com2value < p1cardvalue && com2value < com1value){
                    lowestCardPlayer = 3;
                }
                //If player 1 has the lowest card
                else if (p1cardvalue < com1value && p1cardvalue < com2value){
                    lowestCardPlayer = 1;
                }
                //If player 1 and 2 tie with the lowest card
                else if (p1cardvalue == com1value && p1cardvalue < com2value){
                    lowestCardPlayer = 4;
                }
                //If player 1 and 3 tie with the lowest card
                else if (p1cardvalue == com2value && p1cardvalue < com1value){
                    lowestCardPlayer = 5;
                }
                //If player 2 and 3 tie with the lowest card
                else if (com1value == com2value && com1value < p1cardvalue){
                    lowestCardPlayer = 6;
                }
                //If all 3 players tie with the lowest card
                else if (com1value == com2value && com1value == p1cardvalue){
                    lowestCardPlayer = 7;
                }
                if (playerHands[displayPlayer - 1].empty()) {
                    break;
                }
                if (playerHands[displayPlayer - 1].size()!= 0) {
                 //Displays which player won the round
                cout << endl << "\n--------------------------\n";
                cout << "| Player " << highestCardPlayer << " won the round |";
                cout << endl << "--------------------------\n";
                }
                system("pause");
                if (playerHands[displayPlayer - 1].empty()) {
                    break;
                }
            }
        }
        }
        // Check if the game has ended
        if (playerHands[0].size() == 1 && playerHands[1].size() == 1 && playerHands[2].size() == 1) {
            // Allow the user to play their last card
            cout << endl << "Player " << displayPlayer << "'s last card:" << endl;
            cout << "1: " << playerHands[displayPlayer - 1][0] << endl;

            // Ask the user to confirm playing their last card
            cout << endl << "Press 1 to play your last card: ";
            int choice;
            while (true) {
                cin >> choice;
                if (cin.fail() || choice != 1) {
                    cin.clear();
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');
                    cout << "Invalid input. Please press 1 to play your last card." << endl;
                } else {
                    break;
                }
            }

            // Play the user's last card
            cout << endl << "You played: " << playerHands[displayPlayer - 1][0] << endl;
            p1cardvalue = stringToInt(playerHands[displayPlayer - 1][0].substr(0, playerHands[displayPlayer - 1][0].find(" ")));
            playerHands[displayPlayer - 1].clear();

            // Display what the AI players played
            cout << "Player 2 played: " << playerHands[1][0] << endl;
            com1value = stringToInt(playerHands[1][0].substr(0, playerHands[1][0].find(" ")));
            playerHands[1].clear();

            cout << "Player 3 played: " << playerHands[2][0] << endl;
            com2value = stringToInt(playerHands[2][0].substr(0, playerHands[2][0].find(" ")));
            playerHands[2].clear();

            // Determine the lowest card among the last cards of all players

            if (p1cardvalue < com1value && p1cardvalue < com2value) {
                cout << "Player 1 has the lowest card!" << endl;
                p2score=p2score-com1value;
                p3score=p3score-com2value;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (com1value < p1cardvalue && com1value < com2value) {
                cout << "Player 2 has the lowest card!" << endl;
                p1score=p1score-p1cardvalue;
                p3score=p3score-com2value;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (com2value < p1cardvalue && com2value < com1value) {
                cout << "Player 3 has the lowest card!" << endl;
                p1score=p1score-p1cardvalue;
                p2score=p2score-com1value;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (p1cardvalue == com1value && p1cardvalue < com2value) {
                cout << "Player 1 and Player 2 have the lowest card!" << endl;
                p3score=p3score-com2value;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (p1cardvalue == com2value && p1cardvalue < com1value) {
                cout << "Player 1 and Player 3 have the lowest card!" << endl;
                p2score=p2score-com1value;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (com1value == com2value && com1value < p1cardvalue) {
                cout << "Player 2 and Player 3 have the lowest card!" << endl;
                p1score=p1score-p1cardvalue;
                cout <<p1score<<p2score<<p3score<<endl;
            } else if (p1cardvalue == com1value && p1cardvalue == com2value) {
                cout << "All players have the same lowest card!" << endl;
                cout <<p1score<<p2score<<p3score<<endl;
            }
            //P1 Wins
            if (p2score <= 0 && p3score <= 0){
                winner = 1;
            }
            //P2 Wjns
            if (p1score <= 0 && p3score <= 0){
                winner = 1;
            }
            //P3 Wins
            if (p1score <= 0 && p2score <= 0){
                winner = 1;
            }
            break;
        }
    }
}
int stringToInt(const string& str) {
    int num = 0;
    for (unsigned int i = 0; i < str.length(); ++i) {
        if (str[i] >= '0' && str[i] <= '9') {
            num = num * 10 + (str[i] - '0');
        }
        else {
            break;
        }
    }
    return num;
}

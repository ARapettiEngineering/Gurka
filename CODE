#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <ctime>

using namespace std;

void startScreen();
void game(int numPlayers, int numCards, int displayPlayer);

int main() {
    int numPlayers = 3; // Number of players
    int numCards = 7;   // Number of cards per player
    int displayPlayer = 1; //Chooses which player to display the cards of
    startScreen();
    game(numPlayers, numCards, displayPlayer);
    return 0;
}

// This program displays a start screen with the word "GURKA" in a stylized format
void startScreen() {
    cout << "__________________________________________________" << endl;
    cout << "|                                                |" << endl;
    cout << "|  GGGGG   U     U  RRRRRR   K    K       A      |" << endl;
    cout << "| G     G  U     U  R     R  K   K       A A     |" << endl;
    cout << "| G        U     U  RRRRRR   KKKK       A   A    |" << endl;
    cout << "| G  GGGG  U     U  R    R   K  K      AAAAAAA   |" << endl;
    cout << "| G     G  U     U  R     R  K   K    A       A  |" << endl;
    cout << "|  GGGGG    UUUUU   R     R  K    K  A         A |" << endl;
    cout << "|________________________________________________|" << endl;
    cout << endl << "Please Press Enter to Start" << endl;
    cin.ignore(); // Wait for user input to proceed
}

void game(int numPlayers, int numCards, int displayPlayer) {
    vector<vector<string> > playerHands(numPlayers); // Store each player's hand
    vector<string> deck;
    string suits[4] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    string values[13] = {"2", "3", "4", "5", "6", "7", "8", "9", "10", "J", "Q", "K", "A"};

    // Create a deck of cards
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 13; j++) {
            deck.push_back(values[j] + " of " + suits[i]);
        }
    }
    // Check if there are enough cards
    if (numPlayers * numCards > deck.size()) {
        cout << "Not enough cards in the deck to deal!" << endl;
        return;
    }

    // Shuffle the deck
    srand(time(0));
    for (size_t i = 0; i < deck.size(); i++) {
        size_t j = i + rand() % (deck.size() - i);
        swap(deck[i], deck[j]);
    }

    // Deal cards to all players
    for (int player = 0; player < numPlayers; player++) {
        for (int card = 0; card < numCards; card++) {
            if (!deck.empty()) {
                playerHands[player].push_back(deck.back());
                deck.pop_back();
            }
        }
    }

    // Game loop for the displayed player
    while (!playerHands[displayPlayer - 1].empty()) {
        // Display the displayed player's hand
        cout << "Player " << displayPlayer << "'s cards:" << endl;
        for (size_t i = 0; i < playerHands[displayPlayer - 1].size(); i++) {
            cout << i + 1 << ": " << playerHands[displayPlayer - 1][i] << endl;
        }

        // Ask the player to choose a card to play
        int choice;
        cout << "Choose a card to play (1-" << playerHands[displayPlayer - 1].size() << "): ";
        cin >> choice;

        // Validate the choice
        if (choice < 1 || choice > playerHands[displayPlayer - 1].size()) {
            cout << "Invalid choice. Try again." << endl;
            continue;
        }

        // Play the chosen card
        cout << "You played: " << playerHands[displayPlayer - 1][choice - 1] << endl;

        // Remove the card from the player's hand
        playerHands[displayPlayer - 1].erase(playerHands[displayPlayer - 1].begin() + (choice - 1));

        if (playerHands[displayPlayer - 1].size() == 1) {
            cout << "Player " << displayPlayer << " has 1 card left!" << endl;
        }
    }
}
